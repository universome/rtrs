Assignment 4: Advanced Ray Tracing

The set of tasks will be about an advanced image-order ray-tracing graphics pipeline. This time, there is no strict minimal requirement, all features are optional and each feature gives you a certain number of points.

A new set of meshes (from the history of computer graphics) that should be used for the purpose of this assignment can be found here: https://www.cs.utah.edu/~natevm/newell_teaset/newell_teaset.zip

1. Implement triangle meshes support into your existing ray-tracing system: On top of the quadrics that you have already implemented for ray-object intersection, implement the intersection test for triangle meshes assignment (20 points).

2. In a pre-processing step, for triangle meshes calculate per-face normals and from these calculate per-vertex normals by averaging the normals of all faces that contain the currently processed vertex. Do not forget to normalize these normals again (15 points).

3. In runtime, calculate shading with per-vertex normals that are interpolated using the barycentric coordinates. Do not forget to normalize these normals after each interpolation stage (10 points).

4. Make a visual comparison by toggling the shading between pre-defined and calculated per-vertex normals (5 points).

5. Utilize spatial data structures for iterating over the scene primitives. Place spoons, teacups, and teapots several times in the scene and use bounding geometry (spheres (10 points), boxes (20 points), object-aligned boxes (35 points)) to accelerate the intersection test. If placing the objects together (teacup and teaspoon next to each other) form a bounding volume hierarchy to traverse the scene (30 points).

6. Implement environment mapping using spherical projection (15 points) or cube-mapping (25 points).

7. Implement refraction and attenuation for simulating transparent objects based on the quadric solids including the total internal reflection (50 points).

8. Implement antialiasing using distribution ray tracing with the stratified supersampling technique (15 points).

9. Implement soft shadows using distribution ray tracing (20 points).

10. Implement depth of field effect using distribution ray tracing (20 points).

11. Implement glossy reflection using distribution ray tracing (20 points).

12. Implement motion blur using distribution ray tracing (20 points).
